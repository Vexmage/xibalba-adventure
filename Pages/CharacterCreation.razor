@page "/character-creation"
@using XibalbaAdventure.Models

<h3>Create Your Character</h3>

<label>Name: </label>
<input @bind="character.Name" placeholder="Enter character name" />

<h4>Roll Stats:</h4>
<button @onclick="RollStats">Roll Stats</button>
<ul>
    <li>Kinetic: @character.Kinetic</li>
    <li>Concentration: @character.Concentration</li>
    <li>Stoic: @character.Stoic</li>
    <li>Social: @character.Social</li>
    <li>Perception: @character.Perception</li>
</ul>

<h4>Select Race:</h4>
<select @onchange="UpdateRace">
    <option value="">Select Race</option>
    @foreach (var race in races)
    {
        <option value="@race.Name">@race.Name (@race.Description)</option>
    }
</select>

<h4>Select Class:</h4>
<select @onchange="UpdateClass">
    <option value="">Select Class</option>
    @foreach (var characterClass in classes)
    {
        <option value="@characterClass.Name">@characterClass.Name (@characterClass.Description)</option>
    }
</select>

@if (selectedRace != null && selectedClass != null)
{
    <h4>Updated Character Sheet:</h4>
    <ul>
        <li>Kinetic (with modifiers): @modifiedKinetic</li>
        <li>Concentration (with modifiers): @modifiedConcentration</li>
        <li>Stoic (with modifiers): @modifiedStoic</li>
        <li>Social (with modifiers): @modifiedSocial</li>
        <li>Perception (with modifiers): @modifiedPerception</li>
        <li>Health: @character.Health</li>
        <li>Mana: @character.Mana</li>
    </ul>
}

<button @onclick="SaveCharacter">Save Character</button>

@code {
    private Character character = new Character();  // Use the default constructor

    private List<Race> races = new List<Race> { new Pentarexian(), new Narpaca() };
    private List<CharacterClass> classes = new List<CharacterClass> { new Arquebusier(), new Shocktrooper() };

    private Race selectedRace;
    private CharacterClass selectedClass;

    // Modified stats
    private int modifiedKinetic;
    private int modifiedConcentration;
    private int modifiedStoic;
    private int modifiedSocial;
    private int modifiedPerception;

    private void RollStats()
    {
        Random random = new Random();
        character.Kinetic = random.Next(3, 18);
        character.Concentration = random.Next(3, 18);
        character.Stoic = random.Next(3, 18);
        character.Social = random.Next(3, 18);
        character.Perception = random.Next(3, 18);
        UpdateModifiers(); // Ensure modifiers update with the rolled stats
    }

    private void UpdateRace(ChangeEventArgs e)
    {
        var raceName = e.Value?.ToString();
        selectedRace = races.FirstOrDefault(r => r.Name == raceName);
        UpdateModifiers();
    }

    private void UpdateClass(ChangeEventArgs e)
    {
        var className = e.Value?.ToString();
        selectedClass = classes.FirstOrDefault(c => c.Name == className);
        UpdateModifiers();
    }

    private void UpdateModifiers()
    {
        if (selectedRace != null && selectedClass != null)
        {
            modifiedKinetic = character.Kinetic + selectedRace.KineticModifier;
            modifiedConcentration = character.Concentration + selectedRace.ConcentrationModifier;
            modifiedStoic = character.Stoic + selectedRace.StoicModifier;
            modifiedSocial = character.Social + selectedRace.SocialModifier;
            modifiedPerception = character.Perception + selectedRace.PerceptionModifier;

            // Update health and mana based on the selected class
            character.Health = selectedClass.HealthBonus;
            character.Mana = selectedClass.ManaBonus;
        }
    }

    private void SaveCharacter()
    {
        Console.WriteLine($"Character {character.Name} saved!");
    }
}
