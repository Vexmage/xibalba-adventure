@page "/character-creation"
@using XibalbaAdventure.Models
@using System.Text.Json
@inject IJSRuntime JS

<h3>Create Your Character</h3>

<label>Name: </label>
<input @bind="character.Name" placeholder="Enter character name" />

<h4>Roll Stats:</h4>
<button @onclick="RollStats">Roll Stats</button>
<ul>
    <li>Kinetic: @character.Kinetic</li>
    <li>Concentration: @character.Concentration</li>
    <li>Stoic: @character.Stoic</li>
    <li>Social: @character.Social</li>
    <li>Perception: @character.Perception</li>
</ul>

<h4>Select Race:</h4>
<select @onchange="OnRaceChange">
    @foreach (var race in races)
    {
        <option value="@race.Name">@race.Name (@race.Description)</option>
    }
</select>

<h4>Select Class:</h4>
<select @onchange="OnClassChange">
    @foreach (var characterClass in classes)
    {
        <option value="@characterClass.Name">@characterClass.Name (@characterClass.Description)</option>
    }
</select>

<button @onclick="SaveCharacter">Save Character</button>

@code {
    private Character character = new Character();  // Use the default constructor
    private List<Race> races = new List<Race> { new Pentarexian(), new Narpaca() };
    private List<CharacterClass> classes = new List<CharacterClass> { new Arquebusier(), new Shocktrooper() };

    private void RollStats()
    {
        Random random = new Random();
        character.Kinetic = random.Next(3, 18);
        character.Concentration = random.Next(3, 18);
        character.Stoic = random.Next(3, 18);
        character.Social = random.Next(3, 18);
        character.Perception = random.Next(3, 18);
    }

    private void OnRaceChange(ChangeEventArgs e)
    {
        var selectedRace = races.FirstOrDefault(r => r.Name == e.Value.ToString());
        if (selectedRace != null)
        {
            character.Race = selectedRace;
        }
    }

    private void OnClassChange(ChangeEventArgs e)
    {
        var selectedClass = classes.FirstOrDefault(c => c.Name == e.Value.ToString());
        if (selectedClass != null)
        {
            character.CharacterClass = selectedClass;
        }
    }

    private async Task SaveCharacter()
    {
        var json = JsonSerializer.Serialize(character); // Serialize the character
        await JS.InvokeVoidAsync("downloadCharacterJson", json, character.Name + ".json");  // Use JS to download the file
    }
}
